
apply plugin: 'eclipse'
apply plugin: 'groovy'


//loadConfiguration()

repositories {
	mavenLocal()
	jcenter()
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://repo.spring.io/libs-milestone" }
	maven { url "https://repo.spring.io/libs-release" }
}

dependencies {
	compile "mysql:mysql-connector-java:5.1.34"
	compile "org.apache.httpcomponents:httpmime:4.4.1"
	testCompile "org.codehaus.groovy:groovy-all:2.4.0"
	testCompile "org.spockframework:spock-core:0.7-groovy-2.0"

	testCompile "org.codehaus.groovy.modules.http-builder:http-builder:0.7+"
	testRuntime "cglib:cglib-nodep:3.1"     // allows mocking of classes (in addition to interfaces)
	testRuntime "org.objenesis:objenesis:2.1"  // allows mocking of classes without default constructor (together with CGLIB)	
}

test {
	testLogging.showStandardStreams = true
//	systemProperty  "SERVER_URL", "$env"
//	allJvmArgs = [ "-DSERVER_URL=$env" ]
  }

task printProps << {
	println "serverName: $config.serverName"
} 

//
//def loadConfiguration() {
//    def environment = hasProperty('env') ? env : 'minerva'
//	println "env :"+environment
//	ext.environment = environment
//	println "ext.env :"+ext.environment
//    setProperty 'environment', environment
//    println "Environment is set to $environment"
//    def configFile = file('config.groovy')
//	println "Here is the Config file :"+configFile
//    config = new ConfigSlurper("environment").parse(configFile.toURL())
//	println "Here is the Config Value :"+config
//    ext.config = config
//}


//task configuration << {
//
//systemProperty  "SERVER_URL", "$env"
//
//println System.getenv('SERVER_URL')
////def envi = hasProperty('env') ? env : 'davide'
//println "Environment is :  $env"
//
//}
